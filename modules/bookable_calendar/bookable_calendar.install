<?php

/**
 * @file
 * Install, update and uninstall functions for the Bookable Calendar module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function bookable_calendar_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function bookable_calendar_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function bookable_calendar_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['bookable_calendar_status'] = [
      'title' => t('Bookable Calendar status'),
      'value' => t('Bookable Calendar value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Change Instance base table from to bookable_calendar_opening_inst.
 */
function bookable_calendar_update_8101() {
  $schema = Database::getConnection()->schema();
  $table_exists = $schema->tableExists('bookable_calendar_opening_instance');
  if ($table_exists) {
    $schema->renameTable('bookable_calendar_opening_instance', 'bookable_calendar_opening_inst');
  }
}


/**
 * Add user configurable Success Message field to Bookable Calendar
 */
function bookable_calendar_update_8102() {
  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setLabel(t('Success message'))
    ->setDescription(t('Message displayed after a sucessful registration.'));
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('success_message', 'bookable_calendar', 'bookable_calendar', $field_storage_definition);
}

/**
 * Add Boolean to Calendar to toggle how Slots Per Opening Is Calculated
 */
function bookable_calendar_update_8103() {
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setRevisionable(TRUE)
    ->setLabel(t('Treat Slots as Parties'))
    ->setDescription(t('This will change the math of "Max Slots" to "Max Parties". This will allow you to only have 3 different groups claim a slot but each group can have as big of a party as your Max Party Size limit.'))
    ->setDefaultValue(FALSE)
    ->setSetting('on_label', 'Treat Slots as Parties');
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('slots_as_parties', 'bookable_calendar', 'bookable_calendar', $field_storage_definition);
}

/**
 * Add Email override info to Calendars
 */
function bookable_calendar_update_8104() {
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Override Default User Email'))
    ->setDescription(t('Text in the email is editable on the main settings page, if you want different text per calendar you will need to select this'));
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('notification_email_override', 'bookable_calendar', 'bookable_calendar', $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('User Email Subject'))
    ->setDescription(t('The subject of the email sent to the user if Override Default User Email is set'))
    ->setSetting('max_length', 255);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('notification_email_subject', 'bookable_calendar', 'bookable_calendar', $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(t('User Email Body'))
    ->setDescription(t('The body of the email sent to the user if Override Default User Email is set'));
  \Drupal::entityDefinitionUpdateManager()
  ->installFieldStorageDefinition('notification_email_body', 'bookable_calendar', 'bookable_calendar', $field_storage_definition);
}

/**
 * Add Checked In status to Booking Contacts
 */
function bookable_calendar_update_8105() {
  $field_storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Checked In'))
    ->setDescription(t('Whether or not this user has showed up to their booked event'))
    ->setDefaultValue(FALSE);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('checked_in', 'booking_contact', 'booking_contact', $field_storage_definition);
}